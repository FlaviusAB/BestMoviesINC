@inject NavigationManager NavigationManager
@inject IAccountService AccountService

@page "/Profile"
@using Client.Models.Movies

<MudLayout>
    <MudContainer>
        <MudGrid>
            <div class="empty-space"></div>
            <MudItem xs="12">
                <MudCard>
                    <div class="profileAvatar">
                        <MudAvatar Style="width: 100px; height: 100px; font-size:2rem" Color="Color.Info" Variant="Variant.Filled">@_profileLetter</MudAvatar>
                    </div>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5">
                                <b>@_username</b>
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardHeader>
                        <MudText Typo="Typo.body2">
                            <span class="bold">Date joined: </span> @_date
                        </MudText>
                    </MudCardHeader>
                </MudCard>
            </MudItem>
        </MudGrid>
        <table>
            <tr>
                <th>Nr</th>
                <th>Poster</th>
                <th>Name</th>
                <th>Remove</th>
            </tr>
            @foreach (var item in _profileFavoritesUpdated)
            {
                _count++;
                string poster;
                if (item.PosterPath==null)
                {
                     poster = "/no-image-icon-6.png";;
                }
                else
                {
                     poster = "https://image.tmdb.org/t/p/original" + @item.PosterPath;
                }
                
                <tr>
                    <td class="text_count">
                        @_count
                    </td>
                    <td >
                        <MudButton OnClick="@(() => MovieDetails(@item.Id))">
                            <div class="favorite-list">
                                <MudImage Src="@poster" Fluid="true" Alt=@item.Title Elevation="25" Class="rounded-lg"/>
                            </div>
                        </MudButton>
                    </td>
                    <td>
                        <button>
                            <a class="abc" onclick="@(() => MovieDetails(@item.Id))">
                                @item.Title
                            </a>
                        </button>
                    </td>
                    <td>
                        <MudButton Variant="Variant.Outlined" Size="Size.Large" StartIcon="@Icons.Material.Filled.Favorite"
                                   Color="Color.Primary" OnClick="@(() => RemoveFavoriteMovie(@item.Id))">
                            Remove
                        </MudButton>
                    </td>
                </tr>
            }
        </table>
        <div class="empty-space"></div>
    </MudContainer>
</MudLayout>

@code {

    [Inject]
    private IDbAccess? DbAccess { get; set; }

    [Inject]
    private IMoviesData? MoviesData { get; set; }

    int _count;

    List<string>? _allFavorites;
    private List<Movie> _profileFavorites = new();
    Movie _favoriteEntity = new();
    private readonly List<Movie> _profileFavoritesUpdated = new();


    string _username = "";
    string _email = "";
    string _date = "";
    string? _profileLetter = "";

    protected override async Task OnInitializedAsync()
    {
        await AccountService.Initialize();
        if (AccountService.User?.Username != null)
        {
            _username = AccountService.User?.Username!;
            _email = AccountService.User?.Email!;
            _allFavorites = await GetAllFavorites()!;
            _date = AccountService.User?.RegistrationDate!;
            _profileLetter = AccountService.User?.Username.Substring(0, 1);

            foreach (var str in _allFavorites!)
            {
                _favoriteEntity = await MoviesData?.GetMovieDetails(str)!;
                _profileFavorites.Add(_favoriteEntity);
                _profileFavoritesUpdated.Add(_favoriteEntity);
            }

            Console.WriteLine(AccountService.User?.RegistrationDate);
        }
    }

    private async Task<List<string>?>? GetAllFavorites()
    {
        List<string>? allFav = await DbAccess?.GetAllFavorite(AccountService.User?.Username!);
        return allFav;
    }

    void MovieDetails(int id)
    {
        NavigationManager.NavigateTo($"MovieDetails/{id}");
    }

    private void RemoveFavoriteMovie(int id)
    {
        foreach (var movie in _profileFavorites)
        {
            if (movie.Id == id)
            {
                _profileFavoritesUpdated.Remove(movie);
                _count = 0;
            }
            Console.WriteLine(movie.Title);
        }

        DbAccess?.DeleteFavorite(AccountService!.User?.Username!, id);

        StateHasChanged();
    }


}