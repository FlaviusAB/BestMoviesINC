<<<<<<<<< Temporary merge branch 1
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@page "/Login"
<h3>Login</h3>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form"  >
                <MudTextField T="string" Label="Username" @ref="username"  Required="true" RequiredError="User name is required!"/>
                <MudTextField T="string" Label="Password"  @ref="password" InputType="InputType.Password"/>
                <div class="d-flex align-center justify-space-between mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                </div>
            </MudForm>   
        </MudPaper>
        <MudPaper Class="pa-4 mt-4" Width="350px">
            <MudText> Dont have an account? register right now </MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" Href="/Signup">Sign up</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {

    MudTextField<string> password;
    MudTextField<string> username;
    MudForm form;

    
=========
@using Client.Models.Auth
@page "/login"
@inject IAuthenticationService AuthService;
@inject NavigationManager NavManager;
<h3>Log In</h3>
@if (showAuthenticationError)
{
    <div class="alert alert-danger" role="alert">
        <p>@authenticationErrorText</p>
    </div>
}

    <EditForm Model="model" OnValidSubmit="ExecuteLogin" class="card card-body bg-dark mt-5">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div class="form-group row">
            <label for="email" class="col-md-2 col-form-label">Email:</label>
            <div class="col-md-10">
                <InputText id="email" class="form-control" @bind-Value="model.Email" />
                <ValidationMessage For="@(()=> model.Email)" />
            </div>
        </div>
        
        <div class="form-group row">
            <label for="password" class="col-md-2 col-form-label">Password:</label>
            <div class="col-md-10">
                <InputText type="password" id="password" class="form-control" @bind-Value="model.Password" />
                <ValidationMessage For="@(()=> model.Password)" />
            </div>
        </div>
        
        <div class="row">
            <div class="col-md-12 text-right">
                <button type="submit" class="btn btn-success">Log In</button>
            </div>
        </div>
    </EditForm>

@code {
    private AuthenticationUserModel model = new();
    private bool showAuthenticationError = false;
    private string authenticationErrorText = "";

    private async Task ExecuteLogin()
    {
        showAuthenticationError = false;

        AuthenticatedUserModel result = await AuthService.Login(model);
        
        if (result is not null)
        {
            NavManager.NavigateTo("/");
        }
        else
        {
            authenticationErrorText = "There was an error when trying to log in.";
            showAuthenticationError = true;
        }
    }
>>>>>>>>> Temporary merge branch 2
}