@inject NavigationManager NavigationManager
@inject IAccountService AccountService


@page "/Login"

<div class="empty-space"></div>

<MudLayout>
    <MudContainer MaxWidth="MaxWidth.Medium">
        <h3>Login</h3>

        <MudPaper Class="pa-4">
            <MudForm @ref="_form" @bind-IsValid="@_success">
                <MudTextField T="string" Label="Username" Varian="Variant.Outlined" @bind-Value="_username" Required="true" RequiredError="Type your username"/>
                <MudTextField T="string" Immediate="true" @onkeydown="@Enter" Label="Password" @bind-Value="_password" Required="true" InputType="InputType.Password"/>
                <div class="d-flex align-center justify-space-between mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)" Class="ml-auto" OnClick="@(() => LoginFunc())">
                        @if (_loading)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Login
                    </MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <MudText Color="@Color.Error">
            @ErrorUsernameIncorrectField
        </MudText>
        <MudPaper Class="pa-4 mt-4" Width="350px">
            <MudText> Dont have an account? register right now </MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" Href="/Signup">
                Sign up
            </MudButton>
        </MudPaper>
    </MudContainer>
</MudLayout>

@code {
    bool _success;
    string? ErrorUsernameIncorrect { get; set; }
    string? ErrorUsernameIncorrectField { get; set; }
    string? _password;
    string? _username;
    MudForm? _form;
    

    private Models.Account.Login model = new Models.Account.Login();
    private bool _loading;

    private async void LoginFunc()
    {
        model.Username = _username;
        model.Password = _password;


        _loading = true;
        try
        {
            await AccountService.Login(model);
        }
        catch (Exception ex)
        {
            _loading = false;
            ErrorUsernameIncorrect = "User does not exists. Please register";
            _password = "";

            Console.WriteLine(ex.ToString());
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var timer = new System.Timers.Timer(1000);
        timer.Elapsed += (s, e) =>
        {
            InvokeAsync(() =>
            {
                ErrorUsernameIncorrectField = ErrorUsernameIncorrect;
                StateHasChanged();
            });
        };
        timer.Start();
    }

    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code is not ("Enter" or "NumpadEnter")) return;
        LoginFunc();
    }

}