@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Api.Models
@using Blazored.LocalStorage
@using Client.Services
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject AuthenticationStateProvider _authStateProvider


@page "/Login"
<h3>Login</h3>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form"  >
                <MudTextField T="string" Label="Username" @bind-Value="username"  Required="true" RequiredError="User name is required!"/>
                <MudTextField T="string" Label="Password"  @bind-Value="password" InputType="InputType.Password"/>
                <div class="d-flex align-center justify-space-between mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(() => LoginFunc())">Login</MudButton>
                </div>
            </MudForm>   
        </MudPaper>
        <MudText Color="@Color.Error" >
            @errorUsernameIncorrectField
        </MudText>
        <MudPaper Class="pa-4 mt-4" Width="350px">
            <MudText> Dont have an account? register right now </MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" Href="/Signup">Sign up</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {

    string errorUsernameIncorrect { get; set; }
    string errorUsernameIncorrectField { get; set; }
    string password;
    string username;
    MudForm form;
    
    IDbAccess DbAccess = new DbAccess();
    private bool authenticated;
    
    private async void LoginFunc()
    {
        UserCredentials userData = new UserCredentials(username,password);
        Console.WriteLine(userData.ToString());
        errorUsernameIncorrect=await DbAccess.UserAuthentication(userData);
        // if (errorUsernameIncorrect.Equals("user successfully logged in"))
        // {
        //     NavigationManager.NavigateTo($"/");
        // }
        userData.authToken = errorUsernameIncorrect;
        
        await _localStorage.SetItemAsync(username, userData.authToken);
        //((AuthStateProvider)_authStateProvider).NotifyUserAuthentication(userData.authToken);
        
        
        Console.WriteLine(errorUsernameIncorrect);

    }
    
    protected override void OnInitialized() {
        base.OnInitialized();
        var timer = new System.Timers.Timer(1000);
        timer.Elapsed += (s, e) => {
                                       InvokeAsync(() => {
                                                             errorUsernameIncorrectField = errorUsernameIncorrect;
                                                             StateHasChanged();
                                       });
        };
        timer.Start();
    }
}