@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Client.Exceptions
@using Client.Services
@inject NavigationManager NavigationManager
@inject IAlertService AlertService


@page "/Signup"
<h3>Signup</h3>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Username" @bind-Value="username" Immediate="true" Required="true" RequiredError="User name is required!"/>
                <MudTextField T="string" Label="Email" @bind-Value="email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })"/>
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @bind-Value="password"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!"/>
                <MudTextField T="string"
                              Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))"/>

                <div class="d-flex align-center justify-space-between mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto"
                               OnClick="@(() => SignUp())">
                        Register
                    </MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <MudText Color="@Color.Error">
            @errorUsernameTextField
        </MudText>
        <MudPaper Class="pa-4 mt-4" Width="350px">
            <MudText> Already have an account? Login now </MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" Href="/Login">Login</MudButton>
        </MudPaper>
    </MudItem>

</MudGrid>

@code {
    bool success;
    string[] errors = { };

    string message { get; set; }
    string errorUsernameTextField { get; set; }

    string password;
    string username;
    string email;
    MudForm form;
    IDbAccess DbAccess = new DbAccess();

    private async void SignUp()
    {
        AlertService.Clear();
        User userData = new User(username, password, email, "user");
        message = await DbAccess.RegisterUser(userData);
        if (message.Equals("user successfully registered"))
        {
            message = "";
            AlertService.Success("Registration successful", keepAfterRouteChange: true);
            NavigationManager.NavigateTo($"/Login");
        }
        
    }


    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        var timer = new System.Timers.Timer(1000);
        timer.Elapsed += (s, e) =>
        {
            InvokeAsync(() =>
            {
                errorUsernameTextField = message;
                StateHasChanged();
            });
        };
        timer.Start();
    }

    private string PasswordMatch(string arg)
    {
        if (password != arg)
            return "Passwords don't match";
        return null;
    }

}