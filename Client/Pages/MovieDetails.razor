@page "/MovieDetails/{Value}"
@using Client.Models
@using Client.Services
@using System.Threading
@inject NavigationManager NavigationManager


<MudLayout>
    <MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
        <MudGrid>
            <MudItem xs="12" sm="3">
                <MudImage Width="300" Height="218" Src="@posterPath" Fluid="true" Alt="@movieTitle" Elevation="25" Class="rounded-lg"/>
            </MudItem>
            <MudItem xs="12" sm="9">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5">
                                @movieTitle
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <div>
                            <span >
                                <MudButton Variant="Variant.Filled" Style="@($"color:{Colors.LightGreen.Accent3}; background:{Colors.BlueGrey.Darken4};")" Size="Size.Small">
                                    @voteAverage
                                </MudButton>
                            </span>
                            <span>
                                <MudButton Variant="Variant.Filled" Style="@($"color:{Colors.LightGreen.Accent3}; background:{Colors.BlueGrey.Darken4};")" Size="Size.Small">
                                    @runTime
                                </MudButton>
                            </span>
                        </div>
                        <MudText Class="pt-2">
                            @movieDescription
                        </MudText>
                        <MudText Class="pt-2">
                            <span class="pr-5">Country:</span><span>@countryName</span>
                        </MudText>
                        <MudText Class="pt-2">
                            <span class="pr-5">Genre:</span><span>@genre</span>
                        </MudText>
                        <MudText Class="pt-2">
                            <span class="pr-5">Released:</span><span>@releaseDate</span>
                        </MudText>
                        <MudText Class="pt-2">
                            <span class="pr-5">Production:</span><span>@productionCompanies</span>
                        </MudText>
                        <MudText Class="pt-2">
                            <span class="pr-5">Casts:</span>
                            @for (int i = 0; i < people.Count; i++)
                            {
                                if (i < people.Count - 1)
                                {
                                    cast = people[i].name + ", ";
                                }
                                else
                                {
                                    cast = people[i].name;
                                }
                                var num = i;
                                <button>
                            <a class="abc" onclick="@(() => NamePage(people[num].id))"> 
                                <span class="pr-2"> 
                                @cast
                                </span> 
                            </a>
                            </button>
                            }
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <div class="container" style="height: 310px">
                @foreach (var item in movies)
                {
                    var poster = "";
                    if (@item.PosterPath == null)
                    {
                        poster = "/no-image-icon-6.png";
                    @* @item.Title *@
                    }
                    else
                    {
                        poster = "https://image.tmdb.org/t/p/w200" + @item.PosterPath;
                    }

                    <MudButton OnClick="@(() => SimilarMovies(@item.Id))">
                        <MudPaper Elevation="2" Class="pa-4" Style="height: 250px; width: 180px">
                            <MudImage Src="@poster" Fluid="true" Alt=@item.Title Elevation="25" Class="rounded-lg"/>
                        </MudPaper>
                    </MudButton>
                }
            </div>
        </MudGrid>
    </MudContainer>
</MudLayout>

@code {
    
    [Inject] private IMoviesData MoviesData { get; set; }
    
    [Parameter]
    public string Value { get; set; }

    private string posterPath { get; set; }
    private string movieTitle { get; set; }
    private string movieDescription { get; set; }
    private string runTime { get; set; }
    private string voteAverage { get; set; }
    private string releaseDate { set; get; }
    private List<ProductionCountry> productionCountry;
    private string countryName { get; set; }
    private List<Genre> genres;
    private string genre { get; set; }
    private List<ProductionCompany> productionCompanyList;
    private string productionCompanies { get; set; }
    private List<PeopleEntity> people = new();
    [Parameter]public string cast { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        genre = "";
        productionCompanies = "";
        cast = "";
        var id = Value;
        await MovieDetailsApi(id);
        await MovieCastApi(id);
        await Similar(id);
    }

    private async Task  MovieDetailsApi(string id)
    {

        var obj = await MoviesData.GetMovieDetails(id); 
        
        posterPath = "https://image.tmdb.org/t/p/w200" + obj.PosterPath;
        movieTitle = obj.Title;
        movieDescription = obj.Overview;
        runTime = obj.Runtime + " min";
        voteAverage = obj.VoteAverage + "/10";
        releaseDate = obj.ReleaseDate;
        productionCountry = obj.ProductionCountries;
        genres = obj.Genres;
        productionCompanyList = obj.ProductionCompanies;

        for (var i = 0; i < productionCountry.Count; i++)
        {
            if (i < productionCountry.Count - 1)
            {
                countryName = productionCountry[i].Name + ", ";
            }
            else
            {
                countryName = productionCountry[i].Name;
            }
        }

        for (var i = 0; i < genres.Count; i++)
        {
            if (i < genres.Count - 1)
            {
                genre += genres[i].Name + ", ";
            }
            else
            {
                genre += genres[i].Name;
            }
        }
        
        for (var i = 0; i < productionCompanyList.Count; i++)
        {
            if (i < productionCompanyList.Count - 1)
            {
                productionCompanies += productionCompanyList[i].Name + ", ";
            }
            else
            {
                productionCompanies += productionCompanyList[i].Name;
            }
        }
    }

    private async Task MovieCastApi(string id)
    {
        people = await MoviesData.GetMovieCast(id);
    }
    
    private  void NamePage(int id)
    {
        NavigationManager.NavigateTo($"Name/{id}");
    }
    
    private int Count { get; set; } = 10;

    void SimilarMovies(int id)
    {
        NavigationManager.NavigateTo($"MovieDetails/{id}");
        var timer = new Timer(new TimerCallback(_ =>
        {
            if (Count > 0)
            {
                Count--;

    // Note that the following line is necessary because otherwise
    // Blazor would not recognize the state change and not refresh the UI
                InvokeAsync(() =>
                {

                    StateHasChanged();
                });
            }
        }), null, 1000, 1000);
    }
    
    
    
    private List<Movie> movies = new();
    
    private async Task Similar(string id)
    {
        movies = new List<Movie>();
        movies = await MoviesData.GetSimilar(id);
    }
}