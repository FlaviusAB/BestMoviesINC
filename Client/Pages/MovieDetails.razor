@page "/MovieDetails/{Value}"
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Client.Models
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject NavigationManager uriHelper;

<MudLayout>
    <MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
        <MudGrid>
            <MudItem xs="12" sm="3">
                <MudImage Width="300" Height="218" Src="@posterPath" Fluid="true" Alt="@movieTitle" Elevation="25" Class="rounded-lg"/>
            </MudItem>
            <MudItem xs="12" sm="9">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5">
                                @movieTitle
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <div>
                            <span >
                                <MudButton Variant="Variant.Filled" Style="@($"color:{Colors.LightGreen.Accent3}; background:{Colors.BlueGrey.Darken4};")" Size="Size.Small">
                                    @voteAverage
                                </MudButton>
                            </span>
                            <span>
                                <MudButton Variant="Variant.Filled" Style="@($"color:{Colors.LightGreen.Accent3}; background:{Colors.BlueGrey.Darken4};")" Size="Size.Small">
                                    @runTime
                                </MudButton>
                            </span>
                        </div>
                        <MudText Class="pt-2">
                            @movieDescription
                        </MudText>
                        <MudText Class="pt-2">
                            <span class="pr-5">Country:</span><span>@countryName</span>
                        </MudText>
                        <MudText Class="pt-2">
                            <span class="pr-5">Genre:</span><span>@genre</span>
                        </MudText>
                        <MudText Class="pt-2">
                            <span class="pr-5">Released:</span><span>@releaseDate</span>
                        </MudText>
                        <MudText Class="pt-2">
                            <span class="pr-5">Production:</span><span>@productionCompanies</span>
                        </MudText>
                        <MudText Class="pt-2">
                            <span class="pr-5">Casts:</span>
                            @for (int i = 0; i < people.Count; i++)
                            {
                                cast = people[i].name + ", ";
                                var num = i;
                                <button>
                                    <a class="abc" onclick="@(() => NamePage(people[num].id))"> 
                                        <span class="pr-2"> 
                                            @cast
                                        </span> 
                                    </a>
                                </button>
                            }
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
                <div class="container" style="height: 310px">
                            @foreach (var item in movies)
                                {
                                    var poster = "https://image.tmdb.org/t/p/w200" + @item.PosterPath;
                
                                    <MudButton OnClick="@(() => MovieDetail(@item.Id))">
                                        <MudPaper Elevation="2" Class="pa-4" Style="height: 250px; width: 180px">
                                            <MudImage Src="@poster" Fluid="true" Alt=@item.Title Elevation="25" Class="rounded-lg"/>
                                        </MudPaper>
                                    </MudButton>
                                }
                        </div>
        </MudGrid>
    </MudContainer>
</MudLayout>

@code {
    List<Movie> movies = new();

    
    HttpClient client = new ();
    [Parameter]
    public string Value { get; set; }

    public string posterPath { get; set; }
    public string movieTitle { get; set; }
    public string movieDescription { get; set; }
    public string runTime { get; set; }
    public string voteAverage { get; set; }
    public string releaseDate { set; get; }
    public List<ProductionCountry> productionCountry;
    public string countryName { get; set; }
    public List<Genre> genres;
    public string genre { get; set; }
    public List<ProductionCompany> productionCompanyList;
    public string productionCompanies { get; set; }
    public List<PeopleEntity> people = new();
    public string cast { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        var id = Value;
        await MovieDetailsApi(id);
        await MovieCastApi(id);
        
        HttpClient client = new HttpClient();
        HttpResponseMessage response = await client.GetAsync("https://api.themoviedb.org/3/movie/" + id + "/similar?api_key=a5ab4805002668ee4999f8bac7a4691d" );
        response.EnsureSuccessStatusCode();
        string responseBody = await response.Content.ReadAsStringAsync();

        var resultObjects = AllChildren(JObject.Parse(responseBody))
            .First(c => c.Type == JTokenType.Array && c.Path.Contains("results"))
            .Children<JObject>();

        foreach (JObject result in resultObjects) {
            var obj = JsonConvert.DeserializeObject<Movie>(result.ToString());
            movies.Add(obj);
        }

    }
    
    

    private async Task  MovieDetailsApi(string id)
    {
        
        HttpResponseMessage response = await client.GetAsync("https://api.themoviedb.org/3/movie/"+id+"?api_key=a5ab4805002668ee4999f8bac7a4691d&language=en-US");
        response.EnsureSuccessStatusCode();
        string responseBody = await response.Content.ReadAsStringAsync();
        
        
        var obj = JsonConvert.DeserializeObject<Movie>(responseBody);
        posterPath = "https://image.tmdb.org/t/p/w200" + obj.PosterPath;
        movieTitle = obj.Title;
        movieDescription = obj.Overview;
        runTime = obj.Runtime + " min";
        voteAverage = obj.VoteAverage + "/10";
        releaseDate = obj.ReleaseDate;
        productionCountry = obj.ProductionCountries;
        genres = obj.Genres;
        productionCompanyList = obj.ProductionCompanies;
        for (int i = 0; i < productionCountry.Count; i++)
        {
            if (i < productionCountry.Count - 1)
            {
                countryName = productionCountry[i].Name + ", ";
            }
            else
            {
                countryName = productionCountry[i].Name;
            }
        }
        
        for (int i = 0; i < genres.Count; i++)
        {
            if (i < genres.Count - 1)
            {
                genre += genres[i].Name + ", ";
            }
            else
            {
                genre += genres[i].Name;
            }
        }
        for (int i = 0; i < productionCompanyList.Count; i++)
        {
            if (i < productionCompanyList.Count - 1)
            {
                productionCompanies += productionCompanyList[i].Name.ToString() + ", ";
            }
            else
            {
                productionCompanies += productionCompanyList[i].Name.ToString();
            }
        }
    }

    private async Task MovieCastApi(string id)
    {
        HttpResponseMessage response = await client.GetAsync("https://api.themoviedb.org/3/movie/" + id + "/credits?api_key=a5ab4805002668ee4999f8bac7a4691d&language=en-US");
        response.EnsureSuccessStatusCode();
        string responseBody = await response.Content.ReadAsStringAsync();
        
        var resultObjects = AllChildren(JObject.Parse(responseBody))
            .First(c => c.Type == JTokenType.Array && c.Path.Contains("cast"))
            .Children<JObject>();
        
        foreach (JObject result in resultObjects)
        {
            var obj = JsonConvert.DeserializeObject<PeopleEntity>(result.ToString());
            people.Add(obj);
        }

        for (int i = 0; i < 10; i++)
        {
            if (i < 9)
            {
                cast += people[i].name + ", ";
            }
            else
            {
                cast += people[i].name;
            }
        }
    }
    
    
    
    private int Count { get; set; } = 10;
    
    private void NamePage(int id)
    {
        navigationManager.NavigateTo($"Name/{id}");
    }
    
    void MovieDetail(int id)
    {
        var timer = new Timer(new TimerCallback(_ =>
        {
            if (Count > 0)
            {
                Count--;
                
                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
        }), null, 1000, 1000);
        navigationManager.NavigateTo($"MovieDetails/{id}");

    }


    // void StartCountdown()
    // {
    //     var timer = new Timer(new TimerCallback(_ =>
    //     {
    //         if (Count > 0)
    //         {
    //             Count--;
    //
    // // Note that the following line is necessary because otherwise
    // // Blazor would not recognize the state change and not refresh the UI
    //             InvokeAsync(() =>
    //             {
    //
    //                 StateHasChanged();
    //             });
    //         }
    //     }), null, 1000, 1000);
    // }
    
    
    private static IEnumerable<JToken> AllChildren(JToken json)
    {
        foreach (var c in json.Children())
        {
            yield return c;
            foreach (var cc in AllChildren(c))
            {
                yield return cc;
            }
        }
    }
    
    
    
    
    
    
}