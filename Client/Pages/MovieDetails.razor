@page "/MovieDetails/{Value}"
@using Api.Models

@inject NavigationManager NavigationManager


<MudLayout>
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
<MudGrid>
<MudItem xs="12" sm="3">
    @if (@PosterPath == null)
    {
        <MudImage Width="299" Height="399" Src="/no-image-icon-6.png" Fluid="true" Alt="@MovieTitle" Elevation="25" Class="rounded-lg"/>
    }
    else
    {
        <MudImage Width="299" Height="399" Src="@PosterPath" Fluid="true" Alt="@MovieTitle" Elevation="25" Class="rounded-lg"/>
    }
</MudItem>
<MudItem xs="12" sm="9">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">
                    @MovieTitle
                </MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                @if (_userFound)
                {
                    @if (bool.Parse(_favoriteButton))
                    {
                        <MudButton Variant="Variant.Outlined" Size="Size.Large" StartIcon="@Icons.Material.Filled.Favorite"
                                   Color="Color.Primary" OnClick="RemoveFavoriteMovie">
                            Remove
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Outlined" Size="Size.Large" StartIcon="@Icons.Material.Filled.Favorite"
                                   Color="Color.Primary" OnClick="FavoriteMovie">
                            Add
                        </MudButton>
                    }
                }
                
                <MudText Color="Color.Primary">
                    Favorited by
                    <span id="lime">@_favoriteCount</span> Users
                </MudText>
                
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <div>
                <span>
                    <div class="box">
                        <span>
                            @VoteAverage
                        </span>
                    </div>
                    <div class="box">
                        @VoteCount <span class="something">ratings</span>
                    </div>
                </span>
                <br/>
                <br/>
            </div>
            <div>
                <span>
                    <div class="smallBox">
                        <span>Runtime:</span>
                    </div>
                    <div id="lime">
                        @RunTime
                    </div>
                </span>

            </div>
            <MudText Class="paddingTop5 paddingBottom5">
                @MovieDescription
            </MudText>
            <MudText>
                <span class="paddingRight5 bold">Country:</span><span>@CountryName</span>
            </MudText>
            <MudText Class="paddingTop2">
                <span class="paddingRight5 bold">Genre:</span><span>@Genre</span>
            </MudText>
            <MudText Class="paddingTop2">
                <span class="paddingRight5 bold">Director(s):</span>
                @for (int i = 0; i < _crew.Count; i++)
                {
                    if (i < _crew.Count - 1)
                    {
                        _crewName = _crew[i].Name + ", ";
                    }
                    else
                    {
                        _crewName = _crew[i].Name;
                    }
                    var num = i;
                    <button>
                        <a class="abc" onclick="@(() => NamePage(_crew[num].Id))">
                            <span class="paddingRight2">
                                @_crewName
                            </span>
                        </a>
                    </button>
                }
            </MudText>
            <MudText Class="paddingTop2">
                <span class="paddingRight5 bold">Released:</span><span>@ReleaseDate</span>
            </MudText>
            <MudText Class="paddingTop2">
                <span class="paddingRight5 bold">Production:</span><span>@ProductionCompanies</span>
            </MudText>
            <MudText Class="paddingTop2">
                <span class="paddingRight5 bold">Budget:</span><span>@Budget</span>
            </MudText>
            <MudText Class="paddingTop2">
                <span class="paddingRight5 bold">Revenue:</span><span>@Revenue</span>
            </MudText>

            <MudText Class="paddingTop2">
                <span class="paddingRight5 bold">Casts:</span>
                @if (_showMore)
                {
                    @if (_people.Count > 10)
                    {
                        @for (int i = 0; i < 10; i++)
                        {
                            if (i < 9)
                            {
                                Cast = _people[i].Name + ", ";
                            }
                            else
                            {
                                Cast = _people[i].Name;
                            }
                            var num = i;
                            <button>
                                <a class="abc" onclick="@(() => NamePage(_people[num].Id))">
                                    <span class="paddingRight2">
                                        @Cast
                                    </span>
                                </a>
                            </button>
                        }
                        <button style="color: white" onclick="@ShowMore">Show more...</button>
                    }
                    else
                    {
                        @for (int i = 0; i < _people.Count; i++)
                        {
                            if (i < _people.Count - 1)
                            {
                                Cast = _people[i].Name + ", ";
                            }
                            else
                            {
                                Cast = _people[i].Name;
                            }
                            var num = i;
                            <button>
                                <a class="abc" onclick="@(() => NamePage(_people[num].Id))">
                                    <span class="paddingRight2">
                                        @Cast
                                    </span>
                                </a>
                            </button>
                        }
                    }
                }
                else
                {
                    @for (int i = 0; i < _people.Count; i++)
                    {
                        if (i < _people.Count - 1)
                        {
                            Cast = _people[i].Name + ", ";
                        }
                        else
                        {
                            Cast = _people[i].Name;
                        }
                        var num = i;
                        <button>
                            <a class="abc" onclick="@(() => NamePage(_people[num].Id))">
                                <span class="paddingRight2">
                                    @Cast
                                </span>
                            </a>
                        </button>
                    }
                    _showMore = true;
                }

            </MudText>
        </MudCardContent>
    </MudCard>
</MudItem>


<p class="knownFor">
    <b>Similar movies:</b>
</p>
<div class="container2">
    @foreach (var item in _movies)
    {
        string poster;
        if (@item.PosterPath == null)
        {
            poster = "/no-image-icon-6.png";
            <MudButton OnClick="@(() => SimilarMovies(@item.Id))">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 399px; width: 299px">
                    <MudImage Src="@poster" Fluid="true" Alt=@item.Title Elevation="25" Class="rounded-lg"/>
                    <p class="no-image-text">@item.Title</p>
                </MudPaper>
            </MudButton>
        }
        else
        {
            poster = "https://image.tmdb.org/t/p/original" + @item.PosterPath;
            <MudButton OnClick="@(() => SimilarMovies(@item.Id))">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 250px; width: 180px">
                    <MudImage Src="@poster" Fluid="true" Alt=@item.Title Elevation="25" Class="rounded-lg"/>
                </MudPaper>
            </MudButton>
        }
    }
</div>
<div class="empty-space"></div>
<MudTextField T="string" @bind-Value="@TextValue" Immediate="true" Label="Comment.." Variant="Variant.Outlined" 
              @onkeydown="@Enter"/>

<br/>
@foreach (var item in _allReviews)
    {
        <MudText>@item.username</MudText>
        <MudText>@item.review</MudText>
    }
<div class="empty-space"></div>
</MudGrid>
</MudContainer>
</MudLayout>

@code {

    [Inject]
    private IAccountService? AccountService { get; set; }

    [Inject]
    private IMoviesData? MoviesData { get; set; }

    [Inject]
    private IDbAccess? DbAccess { get; set; }


    [Parameter]
    public string? Value { get; set; }


    private string? Budget { get; set; }
    private string? Revenue { get; set; }
    private string? PosterPath { get; set; }
    private string? MovieTitle { get; set; }
    private string? MovieDescription { get; set; }
    private string? RunTime { get; set; }
    private string? VoteAverage { get; set; }
    private int? VoteCount { get; set; }
    private string? ReleaseDate { set; get; }
    private List<ProductionCountry>? _productionCountry;
    private string? CountryName { get; set; }
    private List<Genre>? _genres;
    private string? Genre { get; set; }
    private List<ProductionCompany>? _productionCompanyList;
    private string? ProductionCompanies { get; set; }
    private List<PeopleEntity> _people = new();
    private List<PeopleEntity> _crewList = new();

    bool _showMore = true;
    
    private string TextValue { get; set; } = "";

    [Parameter]
    public string? Cast { get; set; }

    private List<PeopleEntity> _crew = new();
    private string _crewName = "";
    private List<Movie> _movies = new();

    private bool _userFound;
    private string? _favoriteButton;
    private string? _favoriteCount;

    List<MovieReviewEntity>? _allReviews = new();

    protected override async Task OnParametersSetAsync()
    {
        Genre = "";
        ProductionCompanies = "";
        _crew = new List<PeopleEntity>();
        _allReviews = new List<MovieReviewEntity>();
        Cast = "";
        
        var id = Value;
        if (id != null)
        {
            await MovieDetailsApi(id);
            await MovieCastApi(id);
            await Similar(id);
            await MovieCrewApi(id);
            _allReviews = await GetAllReviews();
        }

            _favoriteCount = await FavoriteCount();
        if (AccountService!.User?.Username != null)
        {
            _userFound = true;
            _favoriteButton = await CheckFavorites();
        }

        else
        {
            _favoriteButton = "false";
            _userFound = false;
        }
    }

    private void FavoriteMovie()
    {
        _favoriteButton = "true";
        FavoriteEntity favorite = new FavoriteEntity(AccountService!.User?.Username!, Value!);
        DbAccess?.SaveFavorite(favorite);
        _favoriteCount = (int.Parse(_favoriteCount) + 1).ToString();
    }
    
    private async Task<List<MovieReviewEntity>?>? GetAllReviews()
    {
        Console.WriteLine("moviedetails 1: ");
        List<MovieReviewEntity>? allRev = await DbAccess?.GetReviews(Int32.Parse(Value!));
        Console.WriteLine("moviedetails 2: " + allRev);
        for(int i=0;i<allRev.Count;i++)
        {
            Console.WriteLine("reviews: " + allRev[i].review);    
        }
        
        return allRev;
    }
    
    private void MovieReview()
    {
        MovieReviewEntity _movieReviewEntity = new MovieReviewEntity(AccountService!.User?.Username!, Value!, @TextValue);
        DbAccess?.SaveReview(_movieReviewEntity);
        TextValue = "";
    }
    
    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code is not ("Enter" or "NumpadEnter") || TextValue.Equals("")) return;
        MovieReview();
    }

    private async Task<string> FavoriteCount()
    {
        var result = await DbAccess?.GetFavoriteCount(Int32.Parse(Value!));
        return result;
    }

    private void RemoveFavoriteMovie()
    {
        _favoriteCount = (int.Parse(_favoriteCount) - 1).ToString();
        _favoriteButton = "false";
        DbAccess?.DeleteFavorite(AccountService!.User?.Username!, Int32.Parse(Value!));
    }

    private async Task<string> CheckFavorites()
    {
        var result = await DbAccess?.GetFavorite(AccountService!.User?.Username!, Int32.Parse(Value!))!;
        return result;
    }


    private async Task MovieDetailsApi(string id)
    {
        if (MoviesData != null)
        {
            var obj = await MoviesData.GetMovieDetails(id);
            if (obj.PosterPath == null)
            {
                PosterPath = "/no-image-icon-6.png";
            }
            else
            {
                PosterPath = "https://image.tmdb.org/t/p/original" + obj.PosterPath;
            }


            MovieTitle = obj.Title;
            MovieDescription = obj.Overview;
            RunTime = obj.Runtime + " min";
            VoteAverage = obj.VoteAverage + "/10";
            VoteCount = obj.VoteCount;
            ReleaseDate = obj.ReleaseDate;
            _productionCountry = obj.ProductionCountries;
            _genres = obj.Genres;
            _productionCompanyList = obj.ProductionCompanies;


            if (obj.Budget > 0)
            {
                Budget = "$" + $"{obj.Budget:n0}";
            }
            else
            {
                Budget = "No data";
            }

            if (obj.Revenue > 0)
            {
                Revenue = "$" + $"{obj.Revenue:n0}";
            }
            else
            {
                Revenue = "No data";
            }
        }

        if (_productionCountry != null)
            for (var i = 0; i < _productionCountry.Count; i++)
            {
                if (i < _productionCountry.Count - 1)
                {
                    CountryName = _productionCountry[i].Name + ", ";
                }
                else
                {
                    CountryName = _productionCountry[i].Name;
                }
            }

        for (var i = 0; i < _genres!.Count; i++)
        {
            if (i < _genres.Count - 1)
            {
                Genre += _genres[i].Name + ", ";
            }
            else
            {
                Genre += _genres[i].Name;
            }
        }

        for (var i = 0; i < _productionCompanyList!.Count; i++)
        {
            if (i < _productionCompanyList.Count - 1)
            {
                ProductionCompanies += _productionCompanyList[i].Name + ", ";
            }
            else
            {
                ProductionCompanies += _productionCompanyList[i].Name;
            }
        }
    }

    private async Task MovieCastApi(string id)
    {
        _people = await MoviesData!.GetMovieCast(id);
    }

    private async Task MovieCrewApi(string id)
    {
        _crewList = await MoviesData!.GetMovieCrew(id);
        foreach (var cr in _crewList)
        {
            if (cr.Department == "Directing")
            {
                _crew.Add(cr);
            }
        }
    }

    private void NamePage(int id)
    {
        NavigationManager.NavigateTo($"Name/{id}");
    }


    void SimilarMovies(int id)
    {
        NavigationManager.NavigateTo($"MovieDetails/{id}");
    }


    private async Task Similar(string id)
    {
        _movies = new List<Movie>();
        _movies = await MoviesData!.GetSimilar(id);
    }

    private void ShowMore()
    {
        _showMore = false;
    }

}