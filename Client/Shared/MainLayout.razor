@inherits LayoutComponentBase
@inject NavigationManager navigationManager

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudTextField @bind-Value="TextValue" @oninput="ValueChanged" Label="Search" Variant="Variant.Filled" @onkeydown="@Enter"></MudTextField>
        <MudButton OnClick="@(() => Search(@TextValue))">click me</MudButton>
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu/>
        <MudContainer MaxWidth="MaxWidth.False">
            <LoginDisplay/>
        </MudContainer>
    </MudDrawer>
    
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False">
            @Body
        </MudContainer>
        
    </MudMainContent>
</MudLayout>
<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>

@code {
    bool _drawerOpen = true;

    private string TextValue { get; set; } = "";
    string urlText = "";
    private EventCallback<ChangeEventArgs> ValueChanged { get; set; }
    
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    
    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            navigationManager.NavigateTo($"Search/{TextValue}");
        }
    }
    
    private void Search(string textValue)
    {
        navigationManager.NavigateTo($"Search/{textValue}");
    }

}